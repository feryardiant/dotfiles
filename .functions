# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# find shorthand
function f() {
	find . -name "$1"
}

# Copy w/ progress
function cp_p() {
  rsync -WavP --human-readable --progress $1 $2
}

# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# Fixing file and folder permissions
function fixperms() {
	if [ -z "$1" ]; then
		path="$1"
	else
		path="."
	fi

	# Change all files perm to 664
	find $path -type f -exec chmod 664 {} +
	# Change all directories perm to 775
	find $path -type d -exec chmod 775 {} +
}

# Extract archives - usage: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

function git_info() {
	# check if we're in a git repo
	git rev-parse --is-inside-work-tree &>/dev/null || return

	# quickest check for what branch we're on
	branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

	if [[ $branch == '' ]]; then
		branch=$(git symbolic-ref -q TAG | sed -e 's|^refs/tags/||')
	fi

	# check if it's dirty (via github.com/sindresorhus/pure)
	dirty=$(git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ]&& echo -e $red"*")

	echo "${white}on ${bold}${green}${branch}${dirty}"
}

function git_release() {
	if [ $# -eq 0 ]; then
		echo "usage: git_release <version> <message>"
	else
		if [ -z "$2" ]; then
			msg="$1 released."
		else
			msg=$2
		fi

		git tag -s $1 -m "$msg"
	fi
}

# take this repo and copy it to somewhere else minus the .git stuff.
function git_export() {
	if [ $# -eq 0 ]; then
		echo "usage: git_export <filename>"
		echo "e.g: git_export mybranch.zip"
	else
		#mkdir -p "$1"
		git archive --format=zip -9 --output="$1" HEAD
		#git archive master | tar -x -C "$1"
	fi
}

function orewa() {
	local my_pwd="${PWD/$HOME/~}"
	echo "${yellow}${USER} ${white}in ${cyan}";
}

# PHP Server
function phpserv() {
	if [ $# -eq 0 ]; then
		echo "usage: phpserv <port>[ <docroot>]"
	else
		if [ -z "$2" ]; then
			docroot="-t ."
		else
			docroot="-t $2"
		fi

		php -S localhost:$1 $docroot
	fi
}

function evalssh() {
	# evaluating ssh-agent
	eval `ssh-agent -s`
	ssh-add ~/.ssh/*_rsa
}

function addppa() {
	if [ $# -eq 0 ]; then
		echo "usage: addppa <ppa>"
		echo ""
		echo "examples:"
		echo " - addppa gue/ganteng"
		echo "   that's mean you run"
		echo "   $ sudo add-apt-repository -y ppa:gue/ganteng"
		echo "   $ sudo apt-get update"
	else
		if add-apt-repository > /dev/null 2>&1; then
			sudo add-apt-repository -y ppa:$1
			sudo apt-get update
		else
			echo "Dude, this OS is not Ubuntu btw."
		fi
	fi
}

# Get list of installed PPAs
# http://askubuntu.com/a/148968/10706 (modified)
function listppa() {
	for APT in `find /etc/apt/ -name \*.list`; do
		grep -Po "(?<=^deb\s).*?(?=#|$)" $APT | while read ENTRY ; do
			echo '  '${ENTRY}
		done
	done
}

